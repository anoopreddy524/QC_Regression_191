<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="21" total="28" passed="6">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="7612587" started-at="2020-01-23T13:22:30Z" finished-at="2020-01-23T15:29:23Z">
    <groups>
      <group name="Anoop_EOD3">
        <method signature="QCStore.Clear_Return_EODTwice()[pri:422, instance:tests.QCStore@520a3426]" name="Clear_Return_EODTwice" class="tests.QCStore"/>
        <method signature="QCStore.DepositEODReDeposit()[pri:426, instance:tests.QCStore@520a3426]" name="DepositEODReDeposit" class="tests.QCStore"/>
        <method signature="QCStore.SignatureNewLoan_EODTwice()[pri:423, instance:tests.QCStore@520a3426]" name="SignatureNewLoan_EODTwice" class="tests.QCStore"/>
      </group> <!-- Anoop_EOD3 -->
      <group name="Anoop_EOD2">
        <method signature="QCStore.DepositEODTwice()[pri:420, instance:tests.QCStore@520a3426]" name="DepositEODTwice" class="tests.QCStore"/>
        <method signature="QCStore.Deposit_DrawEODTwice()[pri:421, instance:tests.QCStore@520a3426]" name="Deposit_DrawEODTwice" class="tests.QCStore"/>
        <method signature="QCStore.PaymentAndDraw()[pri:418, instance:tests.QCStore@520a3426]" name="PaymentAndDraw" class="tests.QCStore"/>
        <method signature="QCStore.PaymentdrawVoidEOD()[pri:419, instance:tests.QCStore@520a3426]" name="PaymentdrawVoidEOD" class="tests.QCStore"/>
      </group> <!-- Anoop_EOD2 -->
    </groups>
    <test name="Test" duration-ms="7612587" started-at="2020-01-23T13:22:30Z" finished-at="2020-01-23T15:29:23Z">
      <class name="tests.QCStore">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.QCStore@520a3426]" name="setup" is-config="true" duration-ms="152" started-at="2020-01-23T13:22:30Z" finished-at="2020-01-23T13:22:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@520a3426]" name="killProcess" is-config="true" duration-ms="2027" started-at="2020-01-23T13:22:30Z" finished-at="2020-01-23T13:22:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="PaymentAndDraw()[pri:418, instance:tests.QCStore@520a3426]" name="PaymentAndDraw" duration-ms="969992" started-at="2020-01-23T13:22:32Z" finished-at="2020-01-23T13:38:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PaymentAndDraw -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@520a3426]" name="getResult" is-config="true" duration-ms="232" started-at="2020-01-23T13:38:42Z" finished-at="2020-01-23T13:38:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PaymentAndDraw status=SUCCESS method=QCStore.PaymentAndDraw()[pri:418, instance:tests.QCStore@520a3426] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@520a3426]" name="killProcess" is-config="true" duration-ms="2010" started-at="2020-01-23T13:38:42Z" finished-at="2020-01-23T13:38:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="PaymentdrawVoidEOD()[pri:419, instance:tests.QCStore@520a3426]" name="PaymentdrawVoidEOD" duration-ms="918951" started-at="2020-01-23T13:38:44Z" finished-at="2020-01-23T13:54:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PaymentdrawVoidEOD -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@520a3426]" name="getResult" is-config="true" duration-ms="68" started-at="2020-01-23T13:54:03Z" finished-at="2020-01-23T13:54:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PaymentdrawVoidEOD status=SUCCESS method=QCStore.PaymentdrawVoidEOD()[pri:419, instance:tests.QCStore@520a3426] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@520a3426]" name="killProcess" is-config="true" duration-ms="2030" started-at="2020-01-23T13:54:04Z" finished-at="2020-01-23T13:54:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="DepositEODTwice()[pri:420, instance:tests.QCStore@520a3426]" name="DepositEODTwice" duration-ms="1230327" started-at="2020-01-23T13:54:06Z" finished-at="2020-01-23T14:14:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DepositEODTwice -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@520a3426]" name="getResult" is-config="true" duration-ms="42" started-at="2020-01-23T14:14:36Z" finished-at="2020-01-23T14:14:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DepositEODTwice status=SUCCESS method=QCStore.DepositEODTwice()[pri:420, instance:tests.QCStore@520a3426] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@520a3426]" name="killProcess" is-config="true" duration-ms="2012" started-at="2020-01-23T14:14:36Z" finished-at="2020-01-23T14:14:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="FAIL" signature="Deposit_DrawEODTwice()[pri:421, instance:tests.QCStore@520a3426]" name="Deposit_DrawEODTwice" duration-ms="840841" started-at="2020-01-23T14:14:38Z" finished-at="2020-01-23T14:28:39Z">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[Unable to find element with name == CmdReturnPosting (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
For documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'QTLSYS0-224', ip: '192.168.0.224', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_181'
Driver info: org.openqa.selenium.ie.InternetExplorerDriver
Capabilities {browserAttachTimeout: 0, browserName: internet explorer, cssSelectorsEnabled: true, elementScrollBehavior: 0, enableElementCacheCleanup: true, enablePersistentHover: true, handlesAlerts: true, ie.browserCommandLineSwitches: , ie.ensureCleanSession: false, ie.forceCreateProcessApi: false, ie.usePerProcessProxy: false, ignoreProtectedModeSettings: false, ignoreZoomSetting: false, initialBrowserUrl: http://localhost:21567/, javascriptEnabled: true, nativeEvents: true, platform: WINDOWS, platformName: WINDOWS, requireWindowFocus: false, takesScreenshot: true, unexpectedAlertBehaviour: dismiss, unhandledPromptBehavior: dismiss, version: 11}
Session ID: 10e24106-a404-4f79-91b3-729e2217cbed
*** Element info: {Using=name, value=CmdReturnPosting}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: Unable to find element with name == CmdReturnPosting (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
For documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'QTLSYS0-224', ip: '192.168.0.224', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_181'
Driver info: org.openqa.selenium.ie.InternetExplorerDriver
Capabilities {browserAttachTimeout: 0, browserName: internet explorer, cssSelectorsEnabled: true, elementScrollBehavior: 0, enableElementCacheCleanup: true, enablePersistentHover: true, handlesAlerts: true, ie.browserCommandLineSwitches: , ie.ensureCleanSession: false, ie.forceCreateProcessApi: false, ie.usePerProcessProxy: false, ignoreProtectedModeSettings: false, ignoreZoomSetting: false, initialBrowserUrl: http://localhost:21567/, javascriptEnabled: true, nativeEvents: true, platform: WINDOWS, platformName: WINDOWS, requireWindowFocus: false, takesScreenshot: true, unexpectedAlertBehaviour: dismiss, unhandledPromptBehavior: dismiss, version: 11}
Session ID: 10e24106-a404-4f79-91b3-729e2217cbed
*** Element info: {Using=name, value=CmdReturnPosting}
at sun.reflect.GeneratedConstructorAccessor67.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:548)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:322)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByName(RemoteWebDriver.java:400)
at org.openqa.selenium.By$ByName.findElement(By.java:284)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:314)
at tests.AQCCSRReturnPosting.returnposting(AQCCSRReturnPosting.java:163)
at tests.QCStore.Deposit_DrawEODTwice(QCStore.java:441)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Deposit_DrawEODTwice -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@520a3426]" name="getResult" is-config="true" duration-ms="864" started-at="2020-01-23T14:28:39Z" finished-at="2020-01-23T14:28:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Deposit_DrawEODTwice status=FAILURE method=QCStore.Deposit_DrawEODTwice()[pri:421, instance:tests.QCStore@520a3426] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@520a3426]" name="killProcess" is-config="true" duration-ms="2011" started-at="2020-01-23T14:28:40Z" finished-at="2020-01-23T14:28:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="Clear_Return_EODTwice()[pri:422, instance:tests.QCStore@520a3426]" name="Clear_Return_EODTwice" duration-ms="1612354" started-at="2020-01-23T14:28:42Z" finished-at="2020-01-23T14:55:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Clear_Return_EODTwice -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@520a3426]" name="getResult" is-config="true" duration-ms="42" started-at="2020-01-23T14:55:34Z" finished-at="2020-01-23T14:55:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Clear_Return_EODTwice status=SUCCESS method=QCStore.Clear_Return_EODTwice()[pri:422, instance:tests.QCStore@520a3426] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@520a3426]" name="killProcess" is-config="true" duration-ms="2015" started-at="2020-01-23T14:55:34Z" finished-at="2020-01-23T14:55:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="SignatureNewLoan_EODTwice()[pri:423, instance:tests.QCStore@520a3426]" name="SignatureNewLoan_EODTwice" duration-ms="1190850" started-at="2020-01-23T14:55:36Z" finished-at="2020-01-23T15:15:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SignatureNewLoan_EODTwice -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@520a3426]" name="getResult" is-config="true" duration-ms="41" started-at="2020-01-23T15:15:27Z" finished-at="2020-01-23T15:15:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SignatureNewLoan_EODTwice status=SUCCESS method=QCStore.SignatureNewLoan_EODTwice()[pri:423, instance:tests.QCStore@520a3426] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@520a3426]" name="killProcess" is-config="true" duration-ms="2018" started-at="2020-01-23T15:15:27Z" finished-at="2020-01-23T15:15:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="DepositEODReDeposit()[pri:426, instance:tests.QCStore@520a3426]" name="DepositEODReDeposit" duration-ms="833638" started-at="2020-01-23T15:15:29Z" finished-at="2020-01-23T15:29:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DepositEODReDeposit -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@520a3426]" name="getResult" is-config="true" duration-ms="32" started-at="2020-01-23T15:29:23Z" finished-at="2020-01-23T15:29:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DepositEODReDeposit status=SUCCESS method=QCStore.DepositEODReDeposit()[pri:426, instance:tests.QCStore@520a3426] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- tests.QCStore -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
